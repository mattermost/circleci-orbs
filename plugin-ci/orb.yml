version: 2.1

description: |
  Stuff to do CI for mattermost plugins.
  Note that if an `.nvmrc` file is present in the plugin project's root directory, this file will be used to determine what version of node to install for CI.

orbs:
  aws-s3: circleci/aws-s3@1.0.16
  codecov: codecov/codecov@1.1.1

executors:
  default:
    docker:
      - image: cimg/go:1.19

commands:
  deploy:
    parameters:
      bucket:
        type: string
      filename:
        type: string
    steps:
      - aws-s3/copy:
          from: << parameters.filename >>
          to: << parameters.bucket >>
          arguments: '--acl public-read --cache-control no-cache'
  install-node:
    description: Install node
    steps:
      - run:
          name: Install Node
          command: |
            set +e
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install || nvm install 13.14 # use `.nvmrc` if it exists, otherwise use 13.14
            nvm alias default $(node --version)

            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
  use-git-ssh:
    description: Configure git to use ssh for dependencies that are fetched with git
    steps:
      - run: git config --global url."ssh://git@".insteadOf git://

  install-golangci-lint:
    description: Install golangci-lint
    parameters:
      version:
        type: string
        default: 1.49.0
      gobin:
        type: string
        default: $GOPATH/bin
      prefix:
        type: string
        default: v2
        description: Prefix for cache key to store the binary.
    steps:
      - restore_cache:
          name: Restore golangci-lint cache
          keys: ['<< parameters.prefix >>-golangci-lint-{{ arch }}-<< parameters.version >>']
      - run:
          name: Install golangci-lint
          command: |
            mkdir -p << parameters.gobin >>
            command -v << parameters.gobin >>/golangci-lint && exit
            download=https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
            wget -O- -q $download | sh -s -- -b << parameters.gobin >>/ v<< parameters.version >>
      - save_cache:
          name: Save golangci-lint cache
          key: '<< parameters.prefix >>-golangci-lint-{{ arch }}-<< parameters.version >>'
          paths: [<< parameters.gobin >>/golangci-lint]

aliases:
- &restore_cache
  restore_cache:
    key: go-mod-v2-{{ checksum "go.sum" }}
- &save_cache
  save_cache:
    key: go-mod-v2-{{ checksum "go.sum" }}
    paths:
    - "$GOPATH/pkg/mod"

jobs:
  lint:
    executor:
      name: default
    resource_class: xlarge
    steps:
      - checkout
      - use-git-ssh
      - install-golangci-lint
      - install-node
      - *restore_cache
      - run:
          name: Checking code style
          command: make check-style
      - run: go mod tidy -v
      - run:
          name: Checking diff of go mod files
          command: |
            git --no-pager diff --exit-code go.mod go.sum || (echo "Please run \"go mod tidy\" and commit the changes in go.mod and go.sum." && exit 1)
      - run: make apply
      - run:
          name: Checking diff of generated manifest files
          command: |
            git --no-pager diff --exit-code *manifest.* || (echo "Please run \"make apply\" and commit the changes in the generated manifests." && exit 1)
      - *save_cache

  test:
    executor:
      name: default
    steps:
      - checkout
      - install-node
      - use-git-ssh
      - *restore_cache
      - run: make test
      - *save_cache

  coverage:
    executor:
      name: default
    steps:
      - checkout
      - install-node
      - use-git-ssh
      - *restore_cache
      - run:
          name: Generating Coverage Results
          command: make coverage
      - *save_cache
      - codecov/upload:
        file: server/coverage.txt

  build:
    executor:
      name: default
    steps:
      - checkout
      - install-node
      - use-git-ssh
      - run:
          name: Building Plugin Bundle
          command: make dist
      - run:
          name: Generating Release Notes
          command: |
            printf "Supported Mattermost Server Versions: **$(cat plugin.json | jq .min_server_version -r)+** \n## Enhancements\n\n## Fixes\n"  >> dist/release-notes.md
            if [[ $(git tag -l | wc -l) -eq 1 ]]; then
              git log --pretty='format:- %h %s' --abbrev-commit --no-decorate --no-color $(git rev-list --max-parents=0 HEAD) HEAD >> dist/release-notes.md
            else
              git log --pretty='format:- %h %s' --abbrev-commit --no-decorate --no-color $(git describe --tags --abbrev=0 $(git describe --tags --abbrev=0)^)..HEAD >> dist/release-notes.md
            fi
      - persist_to_workspace:
          root: dist
          paths:
            - "*.tar.gz"
            - "release-notes.md"
      - store_artifacts:
          path: dist

  deploy-ci:
    docker:
      - image: cimg/python:2.7
    steps:
      - attach_workspace:
          at: dist
      - run: 'mv dist/*.tar.gz dist/$CIRCLE_PROJECT_REPONAME-ci.tar.gz'
      - deploy:
          filename: "dist/*.tar.gz"
          bucket: "s3://mattermost-plugins-ci/ci/"

  deploy-release:
    docker:
      - image: cimg/python:2.7
    steps:
      - attach_workspace:
          at: dist
      - run: 'mv dist/*.tar.gz dist/$CIRCLE_PROJECT_REPONAME-latest.tar.gz'
      - run: 'cp dist/$CIRCLE_PROJECT_REPONAME-latest.tar.gz dist/$CIRCLE_PROJECT_REPONAME-$CIRCLE_TAG.tar.gz'
      - deploy:
          filename: "dist/$CIRCLE_PROJECT_REPONAME-latest.tar.gz"
          bucket: "s3://mattermost-plugins-ci/release/"
      - deploy:
          filename: "dist/$CIRCLE_PROJECT_REPONAME-$CIRCLE_TAG.tar.gz"
          bucket: "s3://mattermost-plugins-ci/release/"

  deploy-release-github:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - attach_workspace:
          at: dist
      - run:
          name: "Publish Release on Github"
          command: |
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -b "$(< ./dist/release-notes.md)" -c ${CIRCLE_SHA1} -n ${CIRCLE_TAG} -delete ${CIRCLE_TAG} dist/*.tar.gz
